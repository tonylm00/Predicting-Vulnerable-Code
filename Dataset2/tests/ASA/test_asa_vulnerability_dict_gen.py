import csv
import os
import shutil
import stat
from unittest.mock import patch
import pandas as pd

import json

from Dataset2.mining_results_asa.ASA_vulnerability_dict_generator import main
import pytest

   
@pytest.mark.parametrize('manage_test_files', ['RepositoryMining_ASAResults_neg.csv'], indirect=True)
@pytest.mark.parametrize('remove_result_file', ['ASA_dict.csv'], indirect=True)
def test_case_1_vuln(manage_test_files, remove_result_file):
    # Run the main function
    main()

    # Load the .tsv file into a DataFrame
    file_path_pos = 'RepositoryMining_ASAResults_pos.csv'  # Replace with the path to your .tsv file
    df_pos = pd.read_csv(file_path_pos, sep='\t')

    # Filter rows where the 'type' column is 'VULNERABILITY'
    vuln_df_pos = df_pos[df_pos['type'] == 'VULNERABILITY']

    result_dict_name = "ASA_dict.csv"

    assert os.path.exists(result_dict_name)

    with open(result_dict_name, "r+") as result_dict:
        result_dict_txt = result_dict.read().replace("\'", "\"")
        list_vuln = json.loads(result_dict_txt)

        assert len(list_vuln) == len(vuln_df_pos)
        for vuln in list_vuln:
            assert vuln['class'] == 'pos'


   
@pytest.mark.parametrize('manage_test_files', ['RepositoryMining_ASAResults_pos.csv'], indirect=True)
@pytest.mark.parametrize('remove_result_file', ['ASA_dict.csv'], indirect=True)
def test_case_2_vuln(manage_test_files, remove_result_file):
    # Run the main function
    main()

    # Load the .tsv file into a DataFrame
    file_path_neg = 'RepositoryMining_ASAResults_neg.csv'  # Replace with the path to your .tsv file
    df_neg = pd.read_csv(file_path_neg, sep='\t')

    # Filter rows where the 'type' column is 'VULNERABILITY'
    vuln_df_neg = df_neg[df_neg['type'] == 'VULNERABILITY']

    result_dict_name = "ASA_dict.csv"

    assert os.path.exists(result_dict_name)

    with open(result_dict_name, "r+") as result_dict:
        result_dict_txt = result_dict.read().replace("\'", "\"")
        list_vuln = json.loads(result_dict_txt)

        assert len(list_vuln) == len(vuln_df_neg)
        for vuln in list_vuln:
            assert vuln['class'] == 'neg'

   
@pytest.mark.parametrize('invalidate_format', ['RepositoryMining_ASAResults_neg.csv'], indirect=True)
@pytest.mark.parametrize('remove_result_file', ['ASA_dict.csv'], indirect=True)
def test_case_3_vuln(invalidate_format, remove_result_file):
    with pytest.raises(IndexError):
        main()

   
@pytest.mark.parametrize('invalidate_format', ['RepositoryMining_ASAResults_pos.csv'], indirect=True)
@pytest.mark.parametrize('remove_result_file', ['ASA_dict.csv'], indirect=True)
def test_case_4_vuln(invalidate_format, remove_result_file):
    with pytest.raises(IndexError):
        main()

   
@pytest.mark.parametrize('invalidate_content', [{'RepositoryMining_ASAResults_neg.csv', 'RepositoryMining_ASAResults_pos.csv'}], indirect=True)
@pytest.mark.parametrize('remove_result_file', ['ASA_dict.csv'], indirect=True)
def test_case_5_vuln(invalidate_content, remove_result_file):
    main()

    dict_file_name = "ASA_dict.csv"

    with open(dict_file_name, 'r+') as big_dict_file:
        big_dict_text = big_dict_file.read().replace("\'", "\"")
        list_vuln = json.loads(big_dict_text)
        assert len(list_vuln) == 0
        
   
@pytest.mark.parametrize('remove_result_file', ['ASA_dict.csv'], indirect=True)
def test_case_6_vuln(remove_result_file):
    main()

    # Load the .tsv file into a DataFrame
    file_path_neg = 'RepositoryMining_ASAResults_neg.csv'  # Replace with the path to your .tsv file
    df_neg = pd.read_csv(file_path_neg, sep='\t')

    # Filter rows where the 'type' column is 'VULNERABILITY'
    vuln_df_neg = df_neg[df_neg['type'] == 'VULNERABILITY']

    # Load the .tsv file into a DataFrame
    file_path_pos = 'RepositoryMining_ASAResults_pos.csv'  # Replace with the path to your .tsv file
    df_pos = pd.read_csv(file_path_pos, sep='\t')

    # Filter rows where the 'type' column is 'VULNERABILITY'
    vuln_df_pos = df_pos[df_pos['type'] == 'VULNERABILITY']

    dict_file_name = "ASA_dict.csv"

    count_pos = 0
    count_neg = 0

    with open(dict_file_name, 'r+') as big_dict_file:
        big_dict_text = big_dict_file.read().replace("\'", "\"")
        list_vuln = json.loads(big_dict_text)

        for vuln in list_vuln:
            if vuln['class'] == 'pos':
                count_pos +=1
            else:
                count_neg +=1

        assert (count_neg == len(vuln_df_neg) and count_pos == len(vuln_df_pos)) == True

   
@pytest.mark.parametrize('remove_content', [{'RepositoryMining_ASAResults_neg.csv', 'RepositoryMining_ASAResults_pos.csv'}], indirect=True)
@pytest.mark.parametrize('remove_result_file', ['ASA_dict.csv'], indirect=True)
def test_case_7_vuln(setup_dir, remove_content, remove_result_file):
    main()

    dict_file_name = "ASA_dict.csv"

    with open(dict_file_name, 'r+') as big_dict_file:
        big_dict_text = big_dict_file.read().replace("\'", "\"")
        list_vuln = json.loads(big_dict_text)
        assert len(list_vuln) == 0












